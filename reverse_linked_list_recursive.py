# -*- coding: utf-8 -*-
"""Reverse_Linked_List_recursive.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16eFNl9Ix9ZcxhBWjelln-WT-Iosvms4O
"""

class ListNode:
     def __init__(self, data=0, next=None):
         self.data = data
         self.next = next

class LinkedListSingly:
    def __init__(self, headNode=None):
        self.head = headNode

    def printNodes(self):
        if self.head is not None:
            currNode = self.head
            while currNode is not None:
                print(currNode.data)
                currNode = currNode.next
        else:
            print('None')

    def push(self, data):

        if self.head is not None:
            currNode = self.head
            while currNode.next is not None:
                currNode = currNode.next
            currNode.next = ListNode(data)
        else:
            self.head = ListNode(data)

sllist = LinkedListSingly()
sllist.push(9)
sllist.push(2)
sllist.push(6)
sllist.push(8)
sllist.printNodes()

class Solution:
    sllist5 = LinkedListSingly()
    def reverseList(self, head):
        currNode = head
        if currNode.next is not None:
            self.reverseList(currNode.next)
            self.sllist5.push(currNode.data)
            return self.sllist5
        else:
            self.sllist5.push(currNode.data)
            return self.sllist5

soln = Solution()
somell = soln.reverseList(sllist.head)

somell.printNodes()

